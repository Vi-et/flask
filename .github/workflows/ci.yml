name: CI - Continuous Integration

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  # Job 1: Linting & Code Quality
  lint:
    name: 🔍 Lint & Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort pylint
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: 🔍 Flake8 - Check code style
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: ⚫ Black - Check code formatting
      run: black --check --diff .
      continue-on-error: true

    - name: 📊 isort - Check import sorting
      run: isort --check-only --diff .
      continue-on-error: true

  # Job 2: Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 📦 Install safety
      run: pip install safety bandit

    - name: 🔒 Check dependencies for vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check --json || true
      continue-on-error: true

    - name: 🕵️ Bandit - Security issues scan
      run: bandit -r . -f json -o bandit-report.json || true
      continue-on-error: true

    - name: 📤 Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
        retention-days: 30

  # Job 3: Testing
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-flask
        pip install -r requirements.txt

    - name: 🧪 Run tests with coverage
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term
      continue-on-error: false

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: 📤 Upload coverage reports
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.11'
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
        retention-days: 30

  # Job 4: Build & Docker
  build:
    name: 🏗️ Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Docker Hub
      if: github.ref == 'refs/heads/master'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.ref == 'refs/heads/master' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
          ${{ secrets.DOCKER_USERNAME }}/flask-app:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/flask-app:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/flask-app:buildcache,mode=max

  # Job 5: Dependency Review
  dependency-review:
    name: 📦 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate

  # Job 6: CodeQL Analysis
  codeql:
    name: 🔬 CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔬 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python

    - name: 🔬 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Job 7: Status Check
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [lint, security, test, build]
    if: always()

    steps:
    - name: ✅ Check CI status
      run: |
        if [[ "${{ needs.lint.result }}" == "failure" ]] || \
           [[ "${{ needs.test.result }}" == "failure" ]] || \
           [[ "${{ needs.build.result }}" == "failure" ]]; then
          echo "❌ CI failed!"
          exit 1
        else
          echo "✅ CI passed!"
        fi
